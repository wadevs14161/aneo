import { NextRequest, NextResponse } from 'next/server'
import { writeFileSync, readFileSync } from 'fs'
import { join } from 'path'
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

// Helper function to verify admin access
async function verifyAdminAccess() {
  try {
    const cookieStore = await cookies()
    
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
          set() {},
          remove() {},
        },
      }
    )

    const { data: { user }, error } = await supabase.auth.getUser()
    
    if (error || !user) {
      return false
    }

    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('role')
      .eq('id', user.id)
      .single()

    return !profileError && (profile?.role === 'admin' || profile?.role === 'superadmin')
  } catch (error) {
    console.error('Error verifying admin access:', error)
    return false
  }
}

// GET - Read current environment variables
export async function GET(request: NextRequest) {
  try {
    const isAdmin = await verifyAdminAccess()
    if (!isAdmin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Read current .env.local file
    const envPath = join(process.cwd(), '.env.local')
    let envContent = ''
    
    try {
      envContent = readFileSync(envPath, 'utf8')
    } catch (error) {
      // File might not exist, that's okay
      console.log('.env.local file not found, will create new one')
    }

    // Parse environment variables
    const envVars: { [key: string]: string } = {}
    const lines = envContent.split('\n')
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=')
        if (key && valueParts.length > 0) {
          envVars[key.trim()] = valueParts.join('=').trim()
        }
      }
    }

    // Also include current process.env values for NEXT_PUBLIC variables
    const publicEnvVars = [
      'NEXT_PUBLIC_SUPABASE_URL',
      'NEXT_PUBLIC_SUPABASE_ANON_KEY',
      'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY',
      'NEXT_PUBLIC_APP_URL'
    ]

    for (const key of publicEnvVars) {
      if (process.env[key] && !envVars[key]) {
        envVars[key] = process.env[key]!
      }
    }

    return NextResponse.json(envVars)
  } catch (error) {
    console.error('Error reading environment variables:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// POST - Save environment variables
export async function POST(request: NextRequest) {
  try {
    const isAdmin = await verifyAdminAccess()
    if (!isAdmin) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const envData = await request.json()

    // Only validate fields that are being updated
    for (const [key, value] of Object.entries(envData)) {
      if (typeof value === 'string' && value.length > 0 && !value.trim()) {
        return NextResponse.json(
          { error: `${key} cannot be empty if provided` },
          { status: 400 }
        )
      }
    }

    // Read existing .env.local file
    const envPath = join(process.cwd(), '.env.local')
    let existingContent = ''
    
    try {
      existingContent = readFileSync(envPath, 'utf8')
    } catch (error) {
      // File might not exist, that's okay
      console.log('.env.local file not found, will create new one')
    }

    // Parse existing environment variables
    const existingEnvVars: { [key: string]: string } = {}
    const lines = existingContent.split('\n')
    const nonEnvLines: string[] = []
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#') && trimmedLine.includes('=')) {
        const [key, ...valueParts] = trimmedLine.split('=')
        if (key && valueParts.length > 0) {
          existingEnvVars[key.trim()] = valueParts.join('=').trim()
        }
      } else {
        nonEnvLines.push(line)
      }
    }

    // Merge with new values
    const updatedEnvVars = { ...existingEnvVars, ...envData }

    // Create new .env.local content
    let envContent = '# Environment Variables\n'
    envContent += '# Generated by Admin Configuration Panel\n'
    envContent += `# Updated: ${new Date().toISOString()}\n\n`

    // Add all environment variables
    for (const [key, value] of Object.entries(updatedEnvVars)) {
      if (value && typeof value === 'string' && value.trim()) {
        envContent += `${key}=${value.trim()}\n`
      }
    }

    // Write to .env.local file
    writeFileSync(envPath, envContent, 'utf8')

    // Update current process.env for immediate effect (NEXT_PUBLIC vars only)
    const publicEnvVars = [
      'NEXT_PUBLIC_SUPABASE_URL',
      'NEXT_PUBLIC_SUPABASE_ANON_KEY',
      'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY',
      'NEXT_PUBLIC_APP_URL'
    ]

    for (const key of publicEnvVars) {
      if (envData[key]) {
        process.env[key] = envData[key]
      }
    }

    return NextResponse.json({ 
      message: 'Environment variables saved successfully',
      timestamp: new Date().toISOString()
    })
  } catch (error) {
    console.error('Error saving environment variables:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}